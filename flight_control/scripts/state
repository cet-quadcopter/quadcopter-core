#!/usr/bin/env python

from threading import Lock

import numpy as np
import rospy as ros

from drone_std_msgs.msg import Accelerometer, Compass, Gyro
from drone_constants.msg import FLIGHT_CONTROL
from flight_control.state.manager import StateManager
from flight_control.quaternion import quaternion_to_euler


def _main():
  ros.init_node('state_estimation_test', anonymous=False, log_level=ros.DEBUG)

  manager = StateManager()

  def acc_handler(msg):
    manager.post_accelerometer(np.array([msg.ax, msg.ay, msg.az]))

  def gyro_handler(msg):
    manager.post_gyro(np.array([msg.gx, msg.gy, msg.gz]))

  def compass_handler(msg):
    manager.post_magnetometer(np.array([msg.mx, msg.my, msg.mz]))

  manager.start()

  ros.Subscriber(FLIGHT_CONTROL.TOPIC_ACCELEROMETER, Accelerometer, acc_handler)
  ros.Subscriber(FLIGHT_CONTROL.TOPIC_COMPASS, Compass, compass_handler)
  ros.Subscriber(FLIGHT_CONTROL.TOPIC_GYRO, Gyro, gyro_handler)

  while not ros.is_shutdown():
    ros.logdebug_throttle(0.5, np.round(quaternion_to_euler(manager.attitude), 1))

  manager.stop()

if __name__ == '__main__':
  _main()
  