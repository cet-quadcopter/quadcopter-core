#!/usr/bin/env python

import os
import socket
import argparse
import threading

import numpy as np
import rospy as ros
from pymavlink import mavutil

from drone_std_msgs.msg import Accelerometer, Barometer, Compass, GPS, Gyro, Propeller, Attitude
from drone_constants.msg import FLIGHT_CONTROL, POSITION_CONTROL

_MSG_FREQUENCY = 1000
_HEARTBEAT_FREQUENCY = 1

_DEFAULT_SENSOR_QUEUE_SIZE = 100
_PUB_FACTORY = lambda topic, msg_type: ros.Publisher(topic, msg_type, queue_size=_DEFAULT_SENSOR_QUEUE_SIZE)

_SIMULATION_SYSTEM_ID = 142
_SIMULATION_COMPONENT_ID = 42
_VEHICLE_SYSTEM_ID = 135
_VEHICLE_COMPONENT_ID = 1


def _create_gps_msg_handler():
  gps_pub = _PUB_FACTORY(POSITION_CONTROL.TOPIC_GPS, GPS)

  def _handler(msg):
    gps = GPS(
      fix_type=msg.fix_type,
      lat=msg.lat,
      lon=msg.lon,
      alt=msg.alt,
      eph=msg.eph,
      epv=msg.epv,
      vel=msg.vel,
      vn=msg.vn,
      ve=msg.ve,
      vd=msg.vd,
      cog=msg.cog,
      satellites_visible=msg.satellites_visible
    )

    gps_pub.publish(gps)

  return _handler

def _create_hil_msg_handler():
  accelerometer_pub = _PUB_FACTORY(FLIGHT_CONTROL.TOPIC_ACCELEROMETER, Accelerometer)
  gyro_pub = _PUB_FACTORY(FLIGHT_CONTROL.TOPIC_GYRO, Gyro)
  compass_pub = _PUB_FACTORY(FLIGHT_CONTROL.TOPIC_COMPASS, Compass)
  barometer_pub = _PUB_FACTORY(FLIGHT_CONTROL.TOPIC_BAROMETER, Barometer)

  def _handler(msg):
    acc = Accelerometer(ax=msg.xacc, ay=msg.yacc, az=msg.zacc)
    accelerometer_pub.publish(acc)

    gyro = Gyro(gx=msg.xgyro, gy=msg.ygyro, gz=msg.zgyro)
    gyro_pub.publish(gyro)

    compass = Compass(mx=msg.xmag, my=msg.ymag, mz=msg.zmag)
    compass_pub.publish(compass)

    barometer = Barometer(pabs=msg.abs_pressure, pdiff=msg.diff_pressure)
    barometer_pub.publish(barometer)

  return _handler

def _create_attitude_quaternion_msg_handler():
  attitude_pub = _PUB_FACTORY(FLIGHT_CONTROL.TOPIC_ATTITUDE, Attitude)

  def _handler(msg):
    # Convert quaternion representation to euler angles
    w, x, y, z = msg.q1, msg.q2, msg.q3, msg.q4
    roll = np.arctan2(2*(w*x + y*z), 1-2*(x**2 + y**2))
    pitch = np.arcsin(2*(w*y - z*x))
    yaw = np.arctan2(2*(w*z + x*y), 1-2*(y**2 + z**2))

    attitude = Attitude(roll=roll, yaw=yaw, pitch=pitch)
    attitude_pub.publish(attitude)

  return _handler


def _create_msg_handler():
  handler_registry = {
    'HIL_SENSOR': _create_hil_msg_handler(),
    'HIL_GPS': _create_gps_msg_handler(),
    'ATTITUDE_QUATERNION': _create_attitude_quaternion_msg_handler()
  }

  def _handler(msg):
    msg_type = msg.get_type()

    if msg_type not in handler_registry:
      return

    ros.logdebug_once('Got message {}'.format(msg))
    handler_registry[msg_type](msg)

  return _handler

def _recv_sim_msgs(connection, handler):
  msg_rate = ros.Rate(_MSG_FREQUENCY)

  while not ros.is_shutdown():
    message = connection.recv_match(blocking=False)

    if not message:
      continue
    
    handler(message)

    msg_rate.sleep()

def _create_propeller_msg_handler(connection):
  def _handler(propeller):
    control = [propeller.prop1, propeller.prop2, propeller.prop3, propeller.prop4] + [-1.0] * 12
    connection.mav.hil_actuator_controls_send(0, control, 0, 0)

  return _handler

def _recv_cmd_msgs(connection):
  ros.Subscriber(
    FLIGHT_CONTROL.TOPIC_PROPELLER, Propeller, _create_propeller_msg_handler(connection)
  )

def _airsim_heartbeat_sender(connection):
  def _executor():
    rate = ros.Rate(1)
    
    while not ros.is_shutdown():
      connection.mav.heartbeat_send(
        mavutil.mavlink.MAV_TYPE_QUADROTOR,
        mavutil.mavlink.MAV_AUTOPILOT_GENERIC,
        mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED,
        0,
        mavutil.mavlink.MAV_STATE_ACTIVE
      )
      rate.sleep()

  return threading.Thread(target=_executor)
  
def _main(sim_ip='0.0.0.0', hil_port=14560, sitl_port=14556, log_level=ros.DEBUG, send_heartbeat=False):
  ros.init_node('airsim_interceptor', log_level=log_level)

  mavutil.set_dialect('common')

  ros.loginfo('Creating HIL mavlink server at {host}:{port}'.format(host=sim_ip, port=hil_port))
  hil = mavutil.mavlink_connection('udpin:{host}:{port}'.format(host=sim_ip, port=hil_port))

  ros.loginfo('Creating SITL mavlink server at {host}:{port}'.format(host=sim_ip, port=sitl_port))
  sitl = mavutil.mavlink_connection('udpin:{host}:{port}'.format(host=sim_ip, port=sitl_port))

  ros.loginfo('Waiting for heartbeat from AirSim')
  sitl.wait_heartbeat()
  
  _recv_cmd_msgs(sitl)

  if send_heartbeat: 
    _airsim_heartbeat_sender(sitl).start()

  _recv_sim_msgs(hil, _create_msg_handler())


if __name__ == '__main__':
  _main()
